<?xml version="1.0"?>

<!-- pvs specification parameters


  Vmin : posreal = 90   %[kt]
  Vmax : posreal = 120  %[kt]

  Lb   : posreal = 5    %[nm]
  Lf   : posreal = 10   %[nm]
  Lm   : posreal = 13   %[nm]
  So   : posreal = 7    %[nm]


-->





<holism>
	<parameter name='N' type='index' comment='number of aircraft in the system' />
	<parameter name='LB' type='real' comment='base zone length' />
	<parameter name='LS' type='real' comment='safety spacing' />
	
	<parameter name='a' type='real' comment='lower bound on rectangular dynamics' />
	<parameter name='b' type='real' comment='upper bound on rectangular dynamics' />
	
	<parameter name='LSsmall' type='real' comment='safety check distance' />



	<variable name='last'  type='index' update_type='discrete' comment='global tail pointer variable, where tail is defined as the plane that is last to land' />

	<assumption equn='a &gt; 0.0 and b &gt; 0.0 and a &lt;= b and a = 90.0 and b = 120.0' comment='xdot in [a, b]' />
	<assumption equn='LS &gt; 0.0 and LS == 7.0' comment='the safety spacing is positive' />
	<assumption equn='LB &gt; 0.0' comment='the base zone length is positive'/>
	<assumption equn='LB == 15.0' comment='the base length is at least as large as the safety spacing'/>
	<assumption equn='LSsmall &gt; 0.0 and LSsmall &lt;= LS - (b - a) * (LB / a)  and LSsmall &lt;= LB and LSsmall &lt;= LS' comment='max time in base is LB/A; max speed difference is b - a; thus, max difference in position through base is (b-a)*(LB/a)'/>
<!-- equivalent to LS + (b - a) * ((LB - LS) / a) -->
	<assumption equn='N &gt;= 2 and N &lt;= 5' comment='there are at least 2 aircraft in the system, but no more than 10' />

	<automaton name='default_automaton'>
		<variable name='x[i]' type='nnreal' update_type='Continuous' />
		<variable name='next[i]' type='index' update_type='Discrete' />
		
		<initial equn='(forall i (x[i] == 0.0 and next[i] == 0)) and last == 0' />

		<mode id='0' name='Fly' initial='True'>
			<dai variable='x[i]' equn='x[i]_dot = 0.0'/>
		</mode>

		<mode id='1' name='Holding' initial='False'>
			<dai variable='x[i]' equn='x[i]_dot = 0.0'/>
		</mode>
		
		<mode id='2' name='Base' initial='False'>
			<dai variable='x[i]' equn='x[i]_dot &gt;= a and x[i]_dot &lt;= b'/>
			<stop equn='x[i] &gt;= LB'/>
			<invariant equn='x[i] &lt;= LB'/>
		</mode>
		
		<mode id='3' name='Land' initial='False'>
			<dai variable='x[i]' equn='x[i]_dot = 0.0'/>
		</mode>

		<transition source='Fly' destination='Holding'>
			<guard equn='next[i] == 0' />
			<action equn='x[i]&apos; = 0.0 and next[i]&apos; = last and last&apos; = i'/>
		</transition>
		

		<transition source='Holding' destination='Base'>
			<guard equn='(next[i] = 0) or (next[i] != 0 and q[ next[i] ] == Base and x[ next[i] ] &gt;= LS)'/>
			<action equn='x[i]&apos; = 0.0'/>
		</transition>

<!-- was a bug here for missing transition: need if last != i, then next'[i] = last, else next'[i] = 0 (or use next[i], since it should be 0) -->

		<transition source='Base' destination='Holding'>
			<guard equn='x[i] &gt;= LB'/>
			<action equn='x[i]&apos; = 0.0 and (if (last != i) then (next[i]&apos; = last) else (next[i]&apos; = next[i])) and last&apos; = i and (forall j (if (j != i and next[j] = i) then (next[j]&apos; = j) else (next[j]&apos; = next[j])))'/>
		</transition>
		
	
		<transition source='Base' destination='Land'>
			<guard equn='x[i] &gt;= LB'/>
			<action equn='x[i]&apos; = 0.0 and next[i]&apos; = 0 and (if (last == i) then (last&apos; = 0) else (last&apos; = last)) and (forall j (if (j != i and next[j] = i) then (next[j]&apos; = j) else (next[j]&apos; = next[j])))'/>
		</transition>

	</automaton>
	
	
	
<!-- uniqueness property of lists
<property equn='forall i (exists j ((next[j] == i) implies (forall k ((k != j) implies (next[k] != i)))))' type='safety' comment='' />	



	<property equn='forall i j ((q[i] == Base and q[j] == Base and next[j] == i) implies (x[i] &gt; x[j]))' type='safety' comment='not a necessary lemma' />
-->




	<property equn='forall i ((q[i] == Fly) implies (last != i))' type='safety' comment='key lemma 3: must hold to show key lemma 2' />
	<property equn='forall i j ((next[j] == i) implies (q[i] != Fly))' type='safety' comment='key lemma 2: must hold to show key lemma 1' />	
	<property equn='forall i j ((q[i] = Holding and next[j] = i) implies (q[j] = Holding))' type='safety' comment='key lemma 1: for showing safety (if this holds, safety holds)' />
	


<!-- <property equn='forall i j ((q[i] == Base and q[j] == Base and next[j] == i) implies (x[i] - x[j] &gt;= LS))' post='forall i j ((q[i] == Base and q[j] == Base and next[j] == i) implies (x[i] - x[j] &gt;= LSsmall))'  type='safety_weak' comment='weak safety: we have to assume there is LS space in the prestate to show there is LSsmall space in the post-state due to the rectangular dynamics' /> -->


	<property equn='forall i j ((q[i] == Base and q[j] == Base and next[j] == i) implies (x[i] &gt;= LSsmall + (LB - x[j]) / (a) * (b - a)))' type='safety' />




	
	<property equn='forall i j ((q[i] == Base and q[j] == Base and next[j] == i) implies (x[i] - x[j] &gt;= LS))' type='safety' comment='Safety: there is always at least S distance between any two distinct aircraft.' />
	<property equn='forall i j ((i != j and q[i] == Base and q[j] == Base and next[j] == i) implies (x[i] - x[j] &gt;= LS))' type='safety' comment='Safety: there is always at least S distance between any two distinct aircraft.' />

	<property equn='forall i ((q[i] == Fly) implies (next[i] == 0))' type='safety' comment='' />
	<property equn='forall i ((q[i] == Land) implies (next[i] == 0))' type='safety' comment='' />
	<property equn='forall i j ((q[i] == Fly) implies (next[i] != j))' type='safety' comment='' />
	<property equn='forall i j ((q[i] == Land) implies (next[i] != j))' type='safety' comment='' />
	<property equn='forall i j ((q[i] == Fly) implies (next[j] != i))' type='safety' comment='' />
	<property equn='forall i j ((q[i] == Land) implies (next[j] != i))' type='safety' comment='' />
	<property equn='forall i j ((next[i] == 0 and last == i) implies (next[j] != i))' type='safety' comment='' />


	<property equn='forall i (next[i] != i)' type='safety' comment='key lemma 1 for landing order property' />
	<property equn='forall i ((last != 0) implies (next[i] != last))' type='safety' comment='basic landing order property' />



	<property equn='forall i ((last == 0) implies (q[i] == Fly or q[i] == Land))' type='safety' comment='key sublemma for showing key lemma for landing order' />

	<property equn='forall i ((q[i] == Holding or q[i] == Base) implies (last != 0))' type='safety' comment='key lemma for showing landing order (needed for transition from Fly to Holding)' />
	<property equn='forall i j ((i != j and (q[i] == Holding or q[i] == Base) and (q[j] == Holding or q[j] == Base) and next[i] == 0) implies (next[j] != 0))' type='safety' comment='unique leader' />
	<property equn='forall i j ((q[i] == Base and q[j] == Base and next[i] == 0) implies (x[i] &gt; x[j]))' type='safety' comment='leader is farthest in base' />



	<property equn='forall i j ((i != j) implies (q[i] != Holding or q[j] != Holding))' type='safety' comment='' />
	<property equn='forall i j ((i != j) implies (q[i] != Base or q[j] != Base))' type='safety' comment='' />

	<property equn='forall i (q[i] == Fly)' type='safety' comment='' />
	<property equn='forall i (q[i] == Holding)' type='safety' comment='' />
	<property equn='forall i (q[i] == Base)' type='safety' comment='' />
	<property equn='forall i (q[i] == Land)' type='safety' comment='' />
	<property equn='forall i (q[i] != Fly)' type='safety' comment='' />
	<property equn='forall i (q[i] != Holding)' type='safety' comment='' />
	<property equn='forall i (q[i] != Base)' type='safety' comment='' />
	<property equn='forall i (q[i] != Land)' type='safety' comment='' />
	
	




<!--

	<property equn='forall i j ((next[i] == 0 and last == i) implies (q[j] == Fly or q[j] == Land))' type='safety' comment='' />	



	<property equn='forall i ((last != 0) implies (next[i] != last))' type='safety' comment='' />	

	<property equn='forall i ((last == 0) implies (q[i] == Fly or q[i] == Land))' type='safety' comment='' />
	<property equn='forall i ((q[i] == Fly or q[i] == Land) implies (last == 0))' type='safety' comment='' />
	<property equn='forall i ((last != 0) implies (q[i] == Holding or q[i] == Base))' type='safety' comment='' />
	<property equn='forall i ((q[i] == Holding or q[i] == Base) implies (last != 0))' type='safety' comment='' />








	<property equn='forall i j ((last == j and next[i] == 0 and q[i] = Holding and next[j] = i) implies (q[j] = Holding))' type='safety' comment='holds with 2 processes' />	
	<property equn='forall i j ((last == j  and q[i] = Holding and next[j] = i) implies (q[j] = Holding))' type='safety' comment='holds with 2 processes' />






	<property equn='forall i j ((last != 0 and next[i] == 0 and q[i] = Holding and next[j] = i) implies (q[j] = Holding))' type='safety' comment='' />	



	<property equn='forall i j ((next[i] == 0 and q[i] = Holding and next[j] = i) implies (q[j] = Holding or q[j] = Land))' type='safety' comment='' />	
	
	
	
	
	<property equn='forall i j ((next[i] == 0 and q[i] = Holding and next[j] = i) implies (q[j] = Holding))' type='safety' comment='' />	


	<property equn='forall i j ((q[i] = Holding and next[j] = i) implies (q[j] = Holding))' type='safety' comment='key lemma for showing safety (if this holds, safety holds)' />
-->
	
	
	
	
	
	
	
<!--










	<property equn='forall i j ((next[i] == 0 and q[i] == Holding and next[j] == i) implies (q[j] = Holding))' type='safety' comment='' />	


	<property equn='forall i j ((i != j and last != 0 and q[i] = Holding and next[j] = i) implies (q[j] = Holding))' type='safety' comment='' />	
	<property equn='forall i j ((i != j and next[j] = i and q[i] == Base) implies (x[i] &gt;= x[j]))' type='safety' comment='' />	


	<property equn='forall i (q[i] = 0)' type='safety' comment='' />
	<property equn='forall i (q[i] = 1)' type='safety' comment='' />
	<property equn='forall i (q[i] = 2)' type='safety' comment='' />
	<property equn='forall i (q[i] = 3)' type='safety' comment='' />
	
	
	<property equn='forall i j ((q[i] == Base and q[j] == Base) imply (x[i] - x[j] &gt;= LS))' type='safety' comment='Safety: there is always at least S distance between any two distinct aircraft.' />
	


<property equn='(first != 0) implies (last != 0)' type='safety' comment='' />
	
	
	
	<property equn='(first = 0)' type='safety' comment='' />
	<property equn='(last = 0)' type='safety' comment='' />
	

	
	<property equn='forall i (q[i] == Fly or q[i] == Holding or q[i] == Base or q[i] == Land)' type='safety' comment='Invariant' />

	<property equn='forall i j ((q[i] == Fly or q[i] == Holding or q[i] == Base or q[i] == Land) and (q[j] == Fly or q[j] == Holding or q[j] == Base or q[j] == Land))' type='safety' comment='Invariant' />
	
	
	
	<property equn='forall i (x[i] &gt;= 0.0)' type='safety' comment='' />
	<property equn='forall i (x[i] = 0.0)' type='safety' comment='' />
	<property equn='forall i (x[i] &gt;= 0.0 and x[i] &lt;= LB)' type='safety' comment='' />
	<property equn='forall i ((q[i] == Base) implies (x[i] &gt;= 0.0 and x[i] &lt;= LB))' type='safety' comment='' />

	<property equn='forall i (x[i] &gt;= 0.0 and x[i] &lt; LB)' type='safety' comment='' />
	<property equn='forall i ((q[i] == Base) implies (x[i] &gt;= 0.0 and x[i] &lt; LB))' type='safety' comment='' />



	
	
	<property equn='forall i j ((q[i] == Base and q[j] == Base) imply (x[i] - x[j] &gt;= LS))' type='safety' comment='Safety: there is always at least S distance between any two distinct aircraft.' />
	


	
	
	<property equn='forall i j ((x[i] >= x[j]) implies (x[i] - x[j] &gt;= LS))' type='safety' comment='Safety: there is always at least S distance between any two distinct aircraft.' />
-->
</holism>







































































<!--


<?xml version="1.0"?>

<holism>
	<parameter name='N' type='index' comment='number of aircraft in the system' />
	<parameter name='L_B' type='real' comment='base zone length' />
	<parameter name='L_S' type='real' comment='safety spacing' />
	<parameter name='v_min' type='real' comment='minimum velocity' />
	<parameter name='v_max' type='real' comment='maximum velocity' />
	
	<parameter name='g' type='index' update_type='Discrete' comment='global head pointer variable' />

	<assumption equn='L_S &gt; 0.0' comment='the safety spacing is positive' />
	<assumption equn='L_B &gt; 0.0' comment='the base zone length is positive'/>
	<assumption equn='L_B &gt; 100.0*L_S' comment='the base length is at least as large as the safety spacing'/>
	<assumption equn='N == 4' comment='there are at least 2 aircraft in the system, but no more than 10' />
	<assumption equn='v_min == 1.0' />
	<assumption equn='v_max == 2.0' />

	<automaton name='default_automaton'>
		<variable name='x[i]' type='nnreal' update_type='Continuous' />
		<variable name='p[i]' type='index' update_type='Discrete' />
		
		<initial equn='(forall i (x[i] == 0.0 and p[i] == 0)) and g == 0' />

		<mode id='0' name='Fly' initial='True'>
			<dai variable='x[i]' equn='x[i]_dot = 0.0'/>
		</mode>

		<mode id='1' name='Holding' initial='False'>
			<dai variable='x[i]' equn='x[i]_dot = 0.0'/>
		</mode>
		
		<mode id='2' name='Base' initial='False'>
			<dai variable='x[i]' equn='x[i]_dot &gt;= v_min and x[i]_dot &lt;= v_max'/>
			<stop equn='x[i] &gt;= L_B'/>
			<invariant equn='x[i] &lt;= L_B'/>
		</mode>
		
		<mode id='3' name='Runway' initial='False'>
			<dai variable='x[i]' equn='x[i]_dot = 0.0'/>
		</mode>
		
		<mode id='4' name='Land' initial='False'>
			<dai variable='x[i]' equn='x[i]_dot = 0.0'/>
		</mode>

		<transition source='Fly' destination='Holding'>
			<action equn='p[i]&apos; = g and g&apos; = i'/>
		</transition>

		<transition source='Holding' destination='Base'>
			<guard equn='((p[i] = 0 or (p[i] &gt; 0 and (q[ p[i] ] = Base or q[ p[i] ] = Runway)))  implies x[ p[i] ] &gt;= L_S)'/>
			<action equn='x[i]&apos; = 0.0'/>
		</transition>
		
		<transition source='Base' destination='Runway'>
			<guard equn='x[i] &gt;= L_B'/>
			<action equn='x[i]&apos; = 0.0'/>
		</transition>
		
		<transition source='Runway' destination='Holding'>
			<action equn='x[i]&apos; = 0.0 and p[i]&apos; = g and g&apos; = i'/>
		</transition>
		
		<transition source='Runway' destination='Land'>
			<action equn='p[i]&apos; = g'/>
		</transition>
	</automaton>
	
	
	<property equn='forall i (q[i] == Fly or q[i] == Holding or q[i] == Base or q[i] == Runway or q[i] == Land)' type='safety' comment='Invariant' />

	<property equn='forall i j ((q[i] == Fly or q[i] == Holding or q[i] == Base or q[i] == Runway or q[i] == Land) and (q[j] == Fly or q[j] == Holding or q[j] == Base or q[j] == Runway or q[j] == Land))' type='safety' comment='Invariant' />
	
	
	
	<property equn='forall i (x[i] &gt;= 0.0)' type='safety' comment='' />

	
	
	<property equn='forall i j ((q[i] == Base and q[j] == Base) imply (x[i] - x[j] &gt;= L_S))' type='safety' comment='Safety: there is always at least S distance between any two distinct aircraft.' />
	


	
	
	<property equn='forall i j ((x[i] >= x[j]) implies (x[i] - x[j] &gt;= L_S))' type='safety' comment='Safety: there is always at least S distance between any two distinct aircraft.' />
</holism>

-->