REACH_USE_CONVEX_HULL = false; // not possible because of global variables
REACH_MAX_ITER = 0; 
REACH_USE_BBOX = false;
COMPOSE_USE_CONVEX_HULL_FOR_REACH = false;
COMPOSE_WITH_REACH_MIN = true;
CHEAP_CONTAIN_RETURN_OTHERS = false;

N := 3;
a := 5;
b := 7;

automaton agent1
contr_var : x_1;
input_var : count;
synclabs :  tau, idlestart1, startcheck1, checkcrit1, checkidle1, critidle1;
loc idle: while  true  wait {  True  }
	 when count == 0 sync idlestart1  do {x_1' == 0 & count' == count }  goto start;
	 when true sync tau do {count' == count & x_1' == x_1} goto idle;
loc start: while x_1 <= a wait { x_1' == 1 }
	 when  true  sync startcheck1  do {count' == 1 + count & x_1' == 0 }  goto check;
	 when true sync tau do {count' == count & x_1' == x_1} goto start;
loc check: while  true  wait { x_1' == 1 }
	 when count <= 1 & x_1 >= b sync checkcrit1  goto crit;
	 when  ! (count <= 1) & x_1 >= b sync checkidle1  do {x_1' == 0 & count' == count }  goto idle;
	 when true sync tau do {count' == count & x_1' == x_1} goto check;
loc crit: while  true  wait {  True  }
	 when  true  sync critidle1  do {count' == -1 + count & x_1' == 0 }  goto idle;
	 when true sync tau do {count' == count & x_1' == x_1} goto crit;

initially idle & x_1 == 0;

end

automaton agent2
contr_var : x_2;
input_var : count;
synclabs :  tau, idlestart2, startcheck2, checkcrit2, checkidle2, critidle2;
loc idle: while  true  wait {  True  }
	 when count == 0 sync idlestart2  do {x_2' == 0 & count' == count }  goto start;
	 when true sync tau do {count' == count & x_2' == x_2} goto idle;
loc start: while x_2 <= a wait { x_2' == 1 }
	 when  true  sync startcheck2  do {count' == 1 + count & x_2' == 0 }  goto check;
	 when true sync tau do {count' == count & x_2' == x_2} goto start;
loc check: while  true  wait { x_2' == 1 }
	 when count <= 1 & x_2 >= b sync checkcrit2  goto crit;
	 when  ! (count <= 1) & x_2 >= b sync checkidle2  do {x_2' == 0 & count' == count }  goto idle;
	 when true sync tau do {count' == count & x_2' == x_2} goto check;
loc crit: while  true  wait {  True  }
	 when  true  sync critidle2  do {count' == -1 + count & x_2' == 0 }  goto idle;
	 when true sync tau do {count' == count & x_2' == x_2} goto crit;

initially idle & x_2 == 0;

end

automaton agent3
contr_var : x_3;
input_var : count;
synclabs :  tau, idlestart3, startcheck3, checkcrit3, checkidle3, critidle3;
loc idle: while  true  wait {  True  }
	 when count == 0 sync idlestart3  do {x_3' == 0 & count' == count }  goto start;
	 when true sync tau do {count' == count & x_3' == x_3} goto idle;
loc start: while x_3 <= a wait { x_3' == 1 }
	 when  true  sync startcheck3  do {count' == 1 + count & x_3' == 0 }  goto check;
	 when true sync tau do {count' == count & x_3' == x_3} goto start;
loc check: while  true  wait { x_3' == 1 }
	 when count <= 1 & x_3 >= b sync checkcrit3  goto crit;
	 when  ! (count <= 1) & x_3 >= b sync checkidle3  do {x_3' == 0 & count' == count }  goto idle;
	 when true sync tau do {count' == count & x_3' == x_3} goto check;
loc crit: while  true  wait {  True  }
	 when  true  sync critidle3  do {count' == -1 + count & x_3' == 0 }  goto idle;
	 when true sync tau do {count' == count & x_3' == x_3} goto crit;

initially idle & x_3 == 0;

end

automaton global
contr_var : count;
synclabs: tau,startcheck1,critidle1,startcheck2,critidle2,startcheck3,critidle3;
loc default: while True wait { count' == 0}
	 when True sync tau do { count' == count } goto default;
	 when True sync startcheck1 do { true } goto default;
	 when True sync critidle1 do { true } goto default;
	 when True sync startcheck2 do { true } goto default;
	 when True sync critidle2 do { true } goto default;
	 when True sync startcheck3 do { true } goto default;
	 when True sync critidle3 do { true } goto default;

initially default & count == 0;

end

sys =  global &  agent1 &  agent2 &  agent3;

sys.print("fischer_bit_ii_sys_N3", 0);
reg = sys.reachable;
reg.print("fischer_bit_ii_reach_N3", 0);
regm11 = reg;
regm11.project_to(x_1,count);
regm11.print("fischer_bit_ii_reach_N3projected11", 0);
regm12 = reg;
regm12.project_to(x_1,x_2,count);
regm12.print("fischer_bit_ii_reach_N3projected12", 0);
regm13 = reg;
regm13.project_to(x_1,x_3,count);
regm13.print("fischer_bit_ii_reach_N3projected13", 0);
regm21 = reg;
regm21.project_to(x_2,count);
regm21.print("fischer_bit_ii_reach_N3projected21", 0);
regm23 = reg;
regm23.project_to(x_2,x_3,count);
regm23.print("fischer_bit_ii_reach_N3projected23", 0);
regm31 = reg;
regm31.project_to(x_3,count);
regm31.print("fischer_bit_ii_reach_N3projected31", 0);
regm32 = reg;
regm32.project_to(x_3,x_2,count);
regm32.print("fischer_bit_ii_reach_N3projected32", 0);
reg.print("fischer_bit_ii_reach_N3", 0);
forbidden = sys.{$~crit~crit~$ & True,
$~crit~$~crit & True,
$~$~crit~crit & True};
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("fischer_bit_ii_reach_bad", 0);
echo "";
echo "Reachable forbidden states empty?";
reg.is_empty;
