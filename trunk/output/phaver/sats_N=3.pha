REACH_USE_CONVEX_HULL = false; // not possible because of global variables
REACH_MAX_ITER = 0; 
REACH_USE_BBOX = false;
COMPOSE_USE_CONVEX_HULL_FOR_REACH = false;
COMPOSE_WITH_REACH_MIN = true;
CHEAP_CONTAIN_RETURN_OTHERS = false;

N := 2;
LB := 5 + 10 + 13;
LS := 7;
a := 90;
b := 120;
LGUARD := LS + (b - a) * ((LB - LS) / a);


automaton agent1
contr_var : x_1,next_1;
input_var : last,x_2,next_2,x_3,next_3;
synclabs :  tau, FlyHolding1, HoldingBase1, BaseHolding1, BaseLand1, reset1, reset2, reset3, noset1, noset2, noset3;
loc Fly: while  true  wait { x_1' == 0 & next_1' == 0 }
	 when next_1 == 0 sync FlyHolding1  do {x_1' == 0 & next_1' == last & last' == 1 }  goto Holding;
	 when true sync tau do {last' == last & x_1' == x_1 & next_1' == next_1} goto Fly;
loc Holding: while  true  wait { x_1' == 0 & next_1' == 0 }
	 when next_1 == 0  sync HoldingBase1  do {x_1' == 0 & last' == last & next_1' == next_1 & next_2' == next_2 & next_3' == next_3}  goto Base;
	 
	 
	 when !(next_1 == 0) & next_1 == 2 & x_2 >= LGUARD sync HoldingBase1  do {x_1' == 0 & last' == last & next_1' == next_1 & next_2' == next_2 & next_3' == next_3 }  goto Base;
	 when !(next_1 == 0) & next_1 == 3 & x_3 >= LGUARD sync HoldingBase1  do {x_1' == 0 & last' == last & next_1' == next_1 & next_2' == next_2 & next_3' == next_3 }  goto Base;
	 
	 
	 when true sync noset1 do {x_1' == x_1 & next_1' == next_1} goto Holding;
	 when true sync reset1 do {x_1' == x_1 & next_1' == 0} goto Holding;
	 when true sync tau do {last' == last & x_1' == x_1 & next_1' == next_1} goto Holding;
loc Base: while x_1 <= LB wait { x_1' >= a & x_1' <= b & next_1' == 0 }
	 when x_1 >= LB & next_1 == 0 & last == 1 sync BaseHolding1  do {x_1' == 0 & next_1' == 0 & last' == 1}  goto Holding;
	 
//	 when x_1 >= LB & next_1 == 0 & !(last == 1) & !(next_2 == 1)  sync BaseHolding1  do {x_1' == 0 & next_1' == last & last' == 1 & next_2' == next_2}  goto Holding;
	 when x_1 >= LB & next_1 == 0 & !(last == 1) & next_2 == 1     sync BaseHolding1,reset2  do {x_1' == 0 & next_1' == last & last' == 1 & next_2' == 0 & next_3' == next_3}  goto Holding;
//	 when x_1 >= LB & next_1 == 0 & !(last == 1) & !(next_3 == 1)  sync BaseHolding1  do {x_1' == 0 & next_1' == last & last' == 1 & next_3' == next_3}  goto Holding;
	 when x_1 >= LB & next_1 == 0 & !(last == 1) & next_3 == 1     sync BaseHolding1,reset3  do {x_1' == 0 & next_1' == last & last' == 1 & next_2' == next_2 & next_3' == 0}  goto Holding;
	 
	 
	 when x_1 >= LB & next_1 == 0 & !(last == 1) & !(next_2 == 1)  sync BaseLand1  do {x_1' == 0 & next_1' == 0 & last' == last & next_2' == next_2 }  goto Land;
	 when x_1 >= LB & next_1 == 0 & !(last == 1) & next_2 == 1     sync BaseLand1,reset2  do {x_1' == 0 & next_1' == 0 & last' == last & next_2' == 0 }  goto Land;
	 when x_1 >= LB & next_1 == 0 & !(last == 1) & !(next_3 == 1)  sync BaseLand1  do {x_1' == 0 & next_1' == 0 & last' == last & next_3' == next_3 }  goto Land;
	 when x_1 >= LB & next_1 == 0 & !(last == 1) & next_3 == 1     sync BaseLand1,reset3  do {x_1' == 0 & next_1' == 0 & last' == last & next_3' == 0 }  goto Land;
	 
	 
	 when x_1 >= LB & next_1 == 0 & (last == 1) sync BaseLand1  do {x_1' == 0 & next_1' == 0 & last' == 0 }  goto Land;
	 
	 
	 when true sync noset1 do {x_1' == x_1 & next_1' == next_1} goto Base;
	 when true sync reset1 do {x_1' == x_1 & next_1' == 0} goto Base;
	 when true sync tau do {last' == last & x_1' == x_1 & next_1' == next_1} goto Base;
loc Land: while  true  wait { x_1' == 0 & next_1' == 0 };

initially Fly & x_1 == 0 & next_1 == 0;

end

automaton agent2
contr_var : x_2,next_2;
input_var : last,x_1,next_1,x_3,next_3;
synclabs :  tau, FlyHolding2, HoldingBase2, BaseHolding2, BaseLand2, reset1, reset2, reset3, noset1, noset2, noset3;
loc Fly: while  true  wait { x_2' == 0 & next_2' == 0 }
	 when next_2 == 0 sync FlyHolding2  do {x_2' == 0 & next_2' == last & last' == 2 }  goto Holding;
	 when true sync tau do {last' == last & x_2' == x_2 & next_2' == next_2} goto Fly;
loc Holding: while  true  wait { x_2' == 0 & next_2' == 0 }
	 when next_2 == 0  sync HoldingBase2  do {x_2' == 0 & last' == last & next_2' == next_2 }  goto Base;
	 
	 when !(next_2 == 0) & next_2 == 1 & x_1 >= LGUARD sync HoldingBase2  do {x_2' == 0 & last' == last & next_2' == next_2 }  goto Base;
	 when !(next_2 == 0) & next_2 == 3 & x_3 >= LGUARD sync HoldingBase2  do {x_2' == 0 & last' == last & next_2' == next_2 }  goto Base;
	 
	 
	 when true sync noset2 do {x_2' == x_2 & next_2' == next_2} goto Holding;
	 when true sync reset2 do {x_2' == x_2 & next_2' == 0} goto Holding;
	 when true sync tau do {last' == last & x_2' == x_2 & next_2' == next_2} goto Holding;
loc Base: while x_2 <= LB wait { x_2' >= a & x_2' <= b & next_2' == 0 }
	 
	 when x_2 >= LB & next_2 == 0 & last == 2 sync BaseHolding2  do {x_2' == 0 & next_2' == 0 & last' == 2}  goto Holding;
	 
//	 when x_2 >= LB & next_2 == 0 & !(last == 2) & !(next_1 == 2)  sync BaseHolding2  do {x_2' == 0 & next_2' == last & last' == 2 & next_1' == next_1}  goto Holding;
	 when x_2 >= LB & next_2 == 0 & !(last == 2) & next_1 == 2     sync BaseHolding2,reset1  do {x_2' == 0 & next_2' == last & last' == 2 & next_1' == 0 & next_3' == next_3}  goto Holding;
//	 when x_2 >= LB & next_2 == 0 & !(last == 2) & !(next_3 == 2)  sync BaseHolding2  do {x_2' == 0 & next_2' == last & last' == 2 & next_3' == next_3}  goto Holding;
	 when x_2 >= LB & next_2 == 0 & !(last == 2) & next_3 == 2     sync BaseHolding2,reset3  do {x_2' == 0 & next_2' == last & last' == 2 & next_1' == next_1 & next_3' == 0}  goto Holding;
	 
	 
	 when x_2 >= LB & next_2 == 0 & !(last == 2) & !(next_1 == 2)  sync BaseLand2  do {x_2' == 0 & next_2' == 0 & last' == last & next_1' == next_1 }  goto Land;
	 when x_2 >= LB & next_2 == 0 & !(last == 2) & next_1 == 2     sync BaseLand2,reset1  do {x_2' == 0 & next_2' == 0 & last' == last & next_1' == 0 & next_3' == next_3 }  goto Land;
	 when x_2 >= LB & next_2 == 0 & !(last == 2) & !(next_3 == 2)  sync BaseLand2  do {x_2' == 0 & next_2' == 0 & last' == last & next_3' == next_3 }  goto Land;
	 when x_2 >= LB & next_2 == 0 & !(last == 2) & next_3 == 2     sync BaseLand2,reset3  do {x_2' == 0 & next_2' == 0 & last' == last & next_1' == next_1 & next_3' == 0 }  goto Land;
	 
	 
	 when x_2 >= LB & next_2 == 0 & (last == 2) sync BaseLand2  do {x_2' == 0 & next_2' == 0 & last' == 0 }  goto Land;
	 
	 when true sync noset2 do {x_2' == x_2 & next_2' == next_2} goto Base;
	 when true sync reset2 do {x_2' == x_2 & next_2' == 0} goto Base;
	 when true sync tau do {last' == last & x_2' == x_2 & next_2' == next_2} goto Base;
loc Land: while  true  wait { x_2' == 0 & next_2' == 0 };

initially Fly & x_2 == 0 & next_2 == 0;

end





automaton agent3
contr_var : x_3,next_3;
input_var : last,x_1,next_1,x_2,next_2;
synclabs :  tau, FlyHolding3, HoldingBase3, BaseHolding3, BaseLand3, reset1, reset2, reset3, noset1, noset2, noset3;
loc Fly: while  true  wait { x_3' == 0 & next_3' == 0 }
	 when next_3 == 0 sync FlyHolding3  do {x_3' == 0 & next_3' == last & last' == 3 }  goto Holding;
	 when true sync tau do {last' == last & x_3' == x_3 & next_3' == next_3} goto Fly;
loc Holding: while  true  wait { x_3' == 0 & next_3' == 0 }
	 when next_3 == 0  sync HoldingBase3  do {x_3' == 0 & last' == last & next_3' == next_3 }  goto Base;
	 
	 
	 when !(next_3 == 0) & next_3 == 1 & x_1 >= LGUARD sync HoldingBase3  do {x_3' == 0 & last' == last & next_3' == next_3 }  goto Base;
	 when !(next_3 == 0) & next_3 == 2 & x_2 >= LGUARD sync HoldingBase3  do {x_3' == 0 & last' == last & next_3' == next_3 }  goto Base;
	 
	 when true sync noset3 do {x_3' == x_3 & next_3' == next_3} goto Holding;
	 when true sync reset3 do {x_3' == x_3 & next_3' == 0} goto Holding;
	 when true sync tau do {last' == last & x_3' == x_3 & next_3' == next_3} goto Holding;
loc Base: while x_3 <= LB wait { x_3' >= a & x_3' <= b & next_3' == 0 }
	 when x_3 >= LB & next_3 == 0 & last == 3 sync BaseHolding3  do {x_3' == 0 & next_3' == 0 & last' == 3}  goto Holding;
	 
	 //when x_3 >= LB & next_3 == 0 & !(last == 3) & !(next_1 == 3)  sync BaseHolding3,noset1  do {x_3' == 0 & next_3' == last & last' == 3 & next_1' == next_1 & next_2' == next_2}  goto Holding;
	 when x_3 >= LB & next_3 == 0 & !(last == 3) & next_1 == 3     sync BaseHolding3,reset1  do {x_3' == 0 & next_3' == last & last' == 3 & next_1' == 0 & next_2' == next_2}  goto Holding;
	 //when x_3 >= LB & next_3 == 0 & !(last == 3) & !(next_2 == 3)  sync BaseHolding3,noset2   do {x_3' == 0 & next_3' == last & last' == 3 & next_1' == next_1 & next_2' == next_2}  goto Holding;
	 when x_3 >= LB & next_3 == 0 & !(last == 3) & next_2 == 3     sync BaseHolding3,reset2  do {x_3' == 0 & next_3' == last & last' == 3 & next_1' == next_1 & next_2' == 0}  goto Holding;
	 
	 
	 when x_3 >= LB & next_3 == 0 & !(last == 3) & !(next_1 == 3)  sync BaseLand3  do {x_3' == 0 & next_3' == 0 & last' == last & next_1' == next_1 }  goto Land;
	 when x_3 >= LB & next_3 == 0 & !(last == 3) & next_1 == 3     sync BaseLand3,reset1  do {x_3' == 0 & next_3' == 0 & last' == last & next_1' == 0 }  goto Land;
	 when x_3 >= LB & next_3 == 0 & !(last == 3) & !(next_2 == 3)  sync BaseLand3  do {x_3' == 0 & next_3' == 0 & last' == last & next_2' == next_2 }  goto Land;
	 when x_3 >= LB & next_3 == 0 & !(last == 3) & next_2 == 3     sync BaseLand3,reset2  do {x_3' == 0 & next_3' == 0 & last' == last & next_2' == 0 }  goto Land;
	 
	 
	 when x_3 >= LB & next_3 == 0 & (last == 3) sync BaseLand3  do {x_3' == 0 & next_3' == 0 & last' == 0 }  goto Land;
	 
	 when true sync noset3 do {x_3' == x_3 & next_3' == next_3} goto Base;
	 when true sync reset3 do {x_3' == x_3 & next_3' == 0} goto Base;
	 when true sync tau do {last' == last & x_3' == x_3 & next_3' == next_3} goto Base;
loc Land: while  true  wait { x_3' == 0 & next_3' == 0 };

initially Fly & x_3 == 0 & next_3 == 0;

end






automaton global
contr_var : last;
input_var : next_1, next_2, next_3;
synclabs: tau,FlyHolding1,BaseHolding1,BaseLand1,FlyHolding2,BaseHolding2,BaseLand2,FlyHolding3,BaseHolding3,BaseLand3,reset1,reset2,reset3, noset1, noset2, noset3;
loc default: while True wait { last' == 0}
	 when True sync tau do { last' == last } goto default;
	 when True sync FlyHolding1 do { true } goto default;
	 when True sync BaseHolding1 do { true } goto default;
	 when True sync BaseLand1 do { true } goto default;
	 when True sync FlyHolding2 do { true } goto default;
	 when True sync BaseHolding2 do { true } goto default;
	 when True sync BaseLand2 do { true } goto default;
	 when True sync FlyHolding3 do { true } goto default;
	 when True sync BaseHolding3 do { true } goto default;
	 when True sync BaseLand3 do { true } goto default;
	 when True sync reset1 do { next_1' == 0 & next_2' == next_2 & next_3' == next_3 } goto default;
	 when True sync reset2 do { next_2' == 0 & next_1' == next_1 & next_3' == next_3 } goto default;
	 when True sync reset3 do { next_3' == 0 & next_1' == next_1 & next_2' == next_2 } goto default;
	 when True sync noset1 do { next_1' == next_1 & next_2' == next_2 & next_3' == next_3 } goto default;
	 when True sync noset2 do { next_2' == next_2 & next_1' == next_1 & next_3' == next_3 } goto default;
	 when True sync noset3 do { next_3' == next_3 & next_1' == next_1 & next_2' == next_2 } goto default;


initially default & last == 0;

end

sys =  global &  agent1 &  agent2 &  agent3;

sys.print("sats_ii_sys_N3", 0);
reg = sys.reachable;
regc = reg;
reg.print("sats_ii_reach_N3", 0);

forbidden = sys.{$~Base~Base~$ & True};
reg = regc;
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("sats_ii_reach_bad", 0);
echo "";
echo "1,2 base?";
reg.is_empty;


forbidden = sys.{$~Base~$~Base & True};
reg = regc;
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("sats_ii_reach_bad", 0);
echo "";
echo "1,3 base?";
reg.is_empty;

forbidden = sys.{$~$~Base~Base & True};
reg = regc;
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("sats_ii_reach_bad", 0);
echo "";
echo "2,3 base?";
reg.is_empty;



forbidden = sys.{$~Base~Base~Base & True};
reg = regc;
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("sats_ii_reach_bad", 0);
echo "";
echo "all base?";
reg.is_empty;


forbidden = sys.{$~$~$~$ & ((next_1 > 0 & next_2 > 0 & next_1 == next_2) | (next_1 > 0 & next_2 > 0 & next_1 == 2 & next_2 == 1) | (next_2 > 0 & next_3 > 0 & next_2 == next_3) | (next_2 > 0 & next_3 > 0 & next_2 == 3 & next_3 == 2) )};
reg = regc;
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("sats_ii_reach_bad_cycle", 0);
echo "";
echo "cycle found?";
reg.is_empty;


forbidden = sys.{$~$~$~$ & (next_1 > 0 & next_2 > 0 & next_3 > 0)};
reg = regc;
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("sats_ii_reach_bad_nohead", 0);
echo "";
echo "no head?";
reg.is_empty;


forbidden = sys.{$~Base~Base~Base & ( (next_1 == 0 & next_2 == 0) | (next_2 == 0 & next_3 == 0)),
$~Holding~Holding~Holding & (next_1 == 0 & next_2 == 0 & next_3 == 0),
$~Holding~Holding~Base & (next_1 == 0 & next_2 == 0 & next_3 == 0),
$~Holding~Base~Base & (next_1 == 0 & next_2 == 0 & next_3 == 0),
$~Base~Holding~Base & (next_1 == 0 & next_2 == 0 & next_3 == 0),
$~Base~Holding~Holding & (next_1 == 0 & next_2 == 0 & next_3 == 0),
$~Holding~Base~Holding & (next_1 == 0 & next_2 == 0 & next_3 == 0)
};
reg = regc;
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("sats_ii_reach_bad_severalHead", 0);
echo "";
echo "several heads?";
reg.is_empty;



forbidden = sys.{
$~Base~Base~$ & ( (next_2 == 1 & (x_1 - x_2 < LS)) | (next_1 == 2 & (x_2 - x_1 < LS)) ),
$~Base~$~Base & ( (next_3 == 1 & (x_1 - x_3 < LS)) | (next_1 == 3 & (x_3 - x_1 < LS)) ),
$~$~Base~Base & ( (next_3 == 2 & (x_2 - x_3 < LS)) | (next_2 == 3 & (x_3 - x_2 < LS)) )

};
reg = regc;
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("sats_ii_reach_bad", 0);
echo "";
echo "Reachable forbidden states empty?";
reg.is_empty;
