REACH_USE_CONVEX_HULL = false; // not possible because of global variables
REACH_MAX_ITER = 0; 
REACH_USE_BBOX = false;
COMPOSE_USE_CONVEX_HULL_FOR_REACH = false;
COMPOSE_WITH_REACH_MIN = true;
CHEAP_CONTAIN_RETURN_OTHERS = false;

N := 3;
S := 5;
L := 5001;

automaton agent1
contr_var : pos_1,b_1;
input_var : x,pos_2,b_2,pos_3,b_3;
synclabs :  tau, IT1, Ifly1, TC1, CE1, EI1, flylanding1, landingfly1;
loc I: while  true  wait { b_1' == 0 }
	 when  true  sync IT1  do {x' == x & pos_1' == pos_1 & b_1' == b_1}  goto T;
	 when  true  sync Ifly1  do {x' == x & pos_1' == pos_1 & b_1' == b_1 }  goto fly;
	 when true sync tau do {x' == x & pos_1' == pos_1 & b_1' == b_1} goto I;
loc T: while  true  wait { b_1' == 0 }
	 when x == 1 sync TC1  do {x' == 0 & pos_1' == pos_1 & b_1' == b_1 }  goto C;
	 when true sync tau do {x' == x & pos_1' == pos_1 & b_1' == b_1} goto T;
loc C: while  true  wait { b_1' == 0 }
	 when  true  sync CE1  do {x' == x & pos_1' == pos_1 & b_1' == b_1}  goto E;
	 when true sync tau do {x' == x & pos_1' == pos_1 & b_1' == b_1} goto C;
loc E: while  true  wait { b_1' == 0 }
	 when  true  sync EI1  do {x' == 1 & pos_1' == pos_1 & b_1' == b_1 }  goto I;
	 when true sync tau do {x' == x & pos_1' == pos_1 & b_1' == b_1} goto E;
loc fly: while  true  wait {  pos_1' == 0  & b_1' == 0 }
	 when (b_2 == 0 & b_3 == 0) sync flylanding1  do {pos_1' == 0 & b_1' == 1 }  goto landing;
	 when (b_2 == 1 & b_3 == 0 & pos_2 >= S) sync flylanding1  do {pos_1' == 0 & b_1' == 1 }  goto landing;
	 when (b_2 == 0 & b_3 == 1 & pos_3 >= S) sync flylanding1  do {pos_1' == 0 & b_1' == 1 }  goto landing;
	 when (b_2 == 1 & b_3 == 1 & pos_2 >= S & pos_3 >= S) sync flylanding1  do {pos_1' == 0 & b_1' == 1 }  goto landing;
	 when true sync tau do {pos_1' == pos_1 & b_1' == b_1} goto fly;
loc landing: while pos_1 <= L wait { pos_1' == 1  & b_1' == 0 }
	 when pos_1 <= L sync landingfly1  do {pos_1' == 0 & b_1' == 0 }  goto fly;
	 when true sync tau do {pos_1' == pos_1 & b_1' == b_1} goto landing;

initially I & pos_1 == 0 & b_1 == 0;

end

automaton agent2
contr_var : pos_2,b_2;
input_var : x,pos_1,b_1,pos_3,b_3;
synclabs :  tau, IT2, Ifly2, TC2, CE2, EI2, flylanding2, landingfly2;
loc I: while  true  wait { b_2' == 0 }
	 when  true  sync IT2  do {x' == x & pos_2' == pos_2 & b_2' == b_2}  goto T;
	 when  true  sync Ifly2  do {x' == x & pos_2' == pos_2 & b_2' == b_2 }  goto fly;
	 when true sync tau do {x' == x & pos_2' == pos_2 & b_2' == b_2} goto I;
loc T: while  true  wait { b_2' == 0 }
	 when x == 1 sync TC2  do {x' == 0 & pos_2' == pos_2 & b_2' == b_2 }  goto C;
	 when true sync tau do {x' == x & pos_2' == pos_2 & b_2' == b_2} goto T;
loc C: while  true  wait { b_2' == 0 }
	 when  true  sync CE2  do {x' == x & pos_2' == pos_2 & b_2' == b_2}  goto E;
	 when true sync tau do {x' == x & pos_2' == pos_2 & b_2' == b_2} goto C;
loc E: while  true  wait { b_2' == 0 }
	 when  true  sync EI2  do {x' == 1 & pos_2' == pos_2 & b_2' == b_2 }  goto I;
	 when true sync tau do {x' == x & pos_2' == pos_2 & b_2' == b_2} goto E;
loc fly: while  true  wait {  pos_2' == 0 & b_2' == 0 }
	 when (b_1 == 0 & b_3 == 0) sync flylanding2  do {pos_2' == 0 & b_2' == 1 }  goto landing;
	 when (b_1 == 1 & b_3 == 0 & pos_1 >= S) sync flylanding2  do {pos_2' == 0 & b_2' == 1 }  goto landing;
	 when (b_1 == 0 & b_3 == 1 & pos_3 >= S) sync flylanding2  do {pos_2' == 0 & b_2' == 1 }  goto landing;
	 when (b_1 == 1 & b_3 == 1 & pos_1 >= S & pos_3 >= S) sync flylanding2  do {pos_2' == 0 & b_2' == 1 }  goto landing;
	 when true sync tau do {pos_2' == pos_2 & b_2' == b_2} goto fly;
loc landing: while pos_2 <= L wait { pos_2' == 1  & b_2' == 0 }
	 when pos_2 <= L sync landingfly2  do {pos_2' == 0 & b_2' == 0}  goto fly;
	 when true sync tau do {pos_2' == pos_2 & b_2' == b_2} goto landing;

initially I & pos_2 == 0 & b_2 == 0;

end

automaton agent3
contr_var : pos_3,b_3;
input_var : x,pos_1,b_1,pos_2,b_2;
synclabs :  tau, IT3, Ifly3, TC3, CE3, EI3, flylanding3, landingfly3;
loc I: while  true  wait { b_3' == 0 }
	 when  true  sync IT3  do {x' == x & pos_3' == pos_3 & b_3' == b_3}  goto T;
	 when  true  sync Ifly3  do {x' == x & pos_3' == pos_3 & b_3' == b_3 }  goto fly;
	 when true sync tau do {x' == x & pos_3' == pos_3 & b_3' == b_3} goto I;
loc T: while  true  wait { b_3' == 0 }
	 when x == 1 sync TC3  do {x' == 0 & pos_3' == pos_3 & b_3' == b_3 }  goto C;
	 when true sync tau do {x' == x & pos_3' == pos_3 & b_3' == b_3} goto T;
loc C: while  true  wait { b_3' == 0 }
	 when  true  sync CE3  do {x' == x & pos_3' == pos_3 & b_3' == b_3}  goto E;
	 when true sync tau do {x' == x & pos_3' == pos_3 & b_3' == b_3} goto C;
loc E: while  true  wait { b_3' == 0 }
	 when  true  sync EI3  do {x' == 1 & pos_3' == pos_3 & b_3' == b_3 }  goto I;
	 when true sync tau do {x' == x & pos_3' == pos_3 & b_3' == b_3} goto E;
loc fly: while  true  wait {  pos_3' == 0 & b_3' == 0 }
	 when (b_1 == 0 & b_2 == 0) sync flylanding3  do {pos_3' == 0 & b_3' == 1 }  goto landing;
	 when (b_1 == 1 & b_2 == 0 & pos_1 >= S) sync flylanding3  do {pos_3' == 0 & b_3' == 1 }  goto landing;
	 when (b_1 == 0 & b_2 == 1 & pos_2 >= S) sync flylanding3  do {pos_3' == 0 & b_3' == 1 }  goto landing;
	 when (b_1 == 1 & b_2 == 1 & pos_1 >= S & pos_2 >= S) sync flylanding3  do {pos_3' == 0 & b_3' == 1 }  goto landing;
	 when true sync tau do {pos_3' == pos_3 & b_3' == b_3} goto fly;
loc landing: while pos_3 <= L wait { pos_3' == 1  & b_3' == 0 }
	 when pos_3 <= L sync landingfly3  do {pos_3' == 0 & b_3' == 0}  goto fly;
	 when true sync tau do {pos_3' == pos_3 & b_3' == b_3} goto landing;

initially I & pos_3 == 0 & b_3 == 0;

end

automaton global
contr_var : x;
synclabs: tau,Ifly1,TC1,EI1,Ifly2,TC2,EI2,Ifly3,TC3,EI3;
loc default: while True wait { x' == 0}
	 when True sync tau do { x' == x } goto default;
	 when True sync Ifly1 do { true } goto default;
	 when True sync TC1 do { true } goto default;
	 when True sync EI1 do { true } goto default;
	 when True sync Ifly2 do { true } goto default;
	 when True sync TC2 do { true } goto default;
	 when True sync EI2 do { true } goto default;
	 when True sync Ifly3 do { true } goto default;
	 when True sync TC3 do { true } goto default;
	 when True sync EI3 do { true } goto default;

initially default & x == 1;

end

sys =  global &  agent1 &  agent2 &  agent3;

sys.print("mux-sats_ii_sys_N3", 0);
reg = sys.reachable;
reg.print("mux-sats_ii_reach_N3", 0);
forbidden = sys.{$~C~C~$ & True,
$~C~$~C & True,
$~$~C~C & True};
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("mux-sats_ii_reach_bad", 0);
echo "";
echo "Reachable forbidden states empty?";
reg.is_empty;
