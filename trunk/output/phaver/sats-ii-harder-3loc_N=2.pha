REACH_USE_CONVEX_HULL = false; // not possible because of global variables
REACH_MAX_ITER = 0; 
REACH_USE_BBOX = false;
COMPOSE_USE_CONVEX_HULL_FOR_REACH = false;
COMPOSE_WITH_REACH_MIN = true;
CHEAP_CONTAIN_RETURN_OTHERS = false;

N := 1;
LB := (5 + 10) + 13;
LS := 7;
a := 90;
b := 120;
LGUARD := LS + ((b - a) * ((LB - LS) / a));

automaton agent1
contr_var : x_1,b_1;
input_var : x_2,b_2;
synclabs :  tau, flybase1, basefly1, baselanded1;
loc fly: while  true  wait { b_1' == 0 }
	 when ( ! (b_2 == 1) | (x_2 >= LGUARD)) sync flybase1  do {x_1' == 0 & b_1' == 1 }  goto base;
	 when true sync tau do {x_1' == x_1 & b_1' == b_1} goto fly;
loc base: while x_1 <= LB wait { x_1' >= a & x_1' <= b & b_1' == 0 }
	 when x_1 >= LB & x_1 <= LB sync basefly1  do {x_1' == 0 & b_1' == 0 }  goto fly;
	 when x_1 >= LB & x_1 <= LB sync baselanded1  do {x_1' == 0 & b_1' == 0 }  goto landed;
	 when true sync tau do {x_1' == x_1 & b_1' == b_1} goto base;
loc landed: while x_1 <= LB wait { x_1' >= a & x_1' <= b & b_1' == 0 }
 ;

initially fly & (x_1 == 0) & (b_1 == 0);

end

automaton agent2
contr_var : x_2,b_2;
input_var : x_1,b_1;
synclabs :  tau, flybase2, basefly2, baselanded2;
loc fly: while  true  wait { b_2' == 0 }
	 when ( ! (b_1 == 1) | (x_1 >= LGUARD)) sync flybase2  do {x_2' == 0 & b_2' == 1 }  goto base;
	 when true sync tau do {x_2' == x_2 & b_2' == b_2} goto fly;
loc base: while x_2 <= LB wait { x_2' >= a & x_2' <= b & b_2' == 0 }
	 when x_2 >= LB & x_2 <= LB sync basefly2  do {x_2' == 0 & b_2' == 0 }  goto fly;
	 when x_2 >= LB & x_2 <= LB sync baselanded2  do {x_2' == 0 & b_2' == 0 }  goto landed;
	 when true sync tau do {x_2' == x_2 & b_2' == b_2} goto base;
loc landed: while x_2 <= LB wait { x_2' >= a & x_2' <= b & b_2' == 0 }
 ;

initially fly & (x_2 == 0) & (b_2 == 0);

end

sys =  agent1 &  agent2;

sys.print("sats-ii-harder-3loc_ii_sys_N2", 0);
reg = sys.reachable;
reg.print("sats-ii-harder-3loc_ii_reach_N2", 0);
forbidden = sys.{base~base & x_1 > x_2 & x_1 - x_2 < LS, base~base & x_2 > x_1 & x_2 - x_1 < LS};
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("sats-ii-harder-3loc_ii_reach_bad", 0);
echo "";
echo "Reachable forbidden states empty?";
reg.is_empty;
