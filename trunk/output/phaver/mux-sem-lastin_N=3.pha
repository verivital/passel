REACH_USE_CONVEX_HULL = false; // not possible because of global variables
REACH_MAX_ITER = 0; 
REACH_USE_BBOX = false;
COMPOSE_USE_CONVEX_HULL_FOR_REACH = false;
COMPOSE_WITH_REACH_MIN = true;
CHEAP_CONTAIN_RETURN_OTHERS = false;

N := 3;

automaton agent1
input_var : x,last;
synclabs :  tau, IT1, TC1, CE1, EI1;
loc I: while  true  wait {  True  }
	 when  true  sync IT1  goto T;
	 when true sync tau do {x' == x & last' == last} goto I;
loc T: while  true  wait {  True  }
	 when x == 1 sync TC1  do {x' == 0 & last' == 1 }  goto C;
	 when true sync tau do {x' == x & last' == last} goto T;
loc C: while  true  wait {  True  }
	 when  true  sync CE1  goto E;
	 when true sync tau do {x' == x & last' == last} goto C;
loc E: while  true  wait {  True  }
	 when  true  sync EI1  do {x' == 1 }  goto I;
	 when true sync tau do {x' == x & last' == last} goto E;

initially I & true ;

end

automaton agent2
input_var : x,last;
synclabs :  tau, IT2, TC2, CE2, EI2;
loc I: while  true  wait {  True  }
	 when  true  sync IT2  goto T;
	 when true sync tau do {x' == x & last' == last} goto I;
loc T: while  true  wait {  True  }
	 when x == 1 sync TC2  do {x' == 0 & last' == 2 }  goto C;
	 when true sync tau do {x' == x & last' == last} goto T;
loc C: while  true  wait {  True  }
	 when  true  sync CE2  goto E;
	 when true sync tau do {x' == x & last' == last} goto C;
loc E: while  true  wait {  True  }
	 when  true  sync EI2  do {x' == 1 }  goto I;
	 when true sync tau do {x' == x & last' == last} goto E;

initially I & true ;

end

automaton agent3
input_var : x,last;
synclabs :  tau, IT3, TC3, CE3, EI3;
loc I: while  true  wait {  True  }
	 when  true  sync IT3  goto T;
	 when true sync tau do {x' == x & last' == last} goto I;
loc T: while  true  wait {  True  }
	 when x == 1 sync TC3  do {x' == 0 & last' == 3 }  goto C;
	 when true sync tau do {x' == x & last' == last} goto T;
loc C: while  true  wait {  True  }
	 when  true  sync CE3  goto E;
	 when true sync tau do {x' == x & last' == last} goto C;
loc E: while  true  wait {  True  }
	 when  true  sync EI3  do {x' == 1 }  goto I;
	 when true sync tau do {x' == x & last' == last} goto E;

initially I & true ;

end

automaton global
contr_var : x,last;
synclabs: tau, TC1, EI1, TC2, EI2, TC3, EI3;
loc default: while True wait { x' == 0 & last' == 0}
	 when True sync tau do { x' == x & last' == last } goto default;
	 when True sync TC1 do { true } goto default;
	 when True sync EI1 do { true } goto default;
	 when True sync TC2 do { true } goto default;
	 when True sync EI2 do { true } goto default;
	 when True sync TC3 do { true } goto default;
	 when True sync EI3 do { true } goto default;

initially default & x == 1 & last == 0;

end

sys =  global &  agent1 &  agent2 &  agent3;

sys.print("mux-sem-lastin_ii_sys_N3", 0);
reg = sys.reachable;
reg.print("mux-sem-lastin_ii_reach_N3", 0);
forbidden = sys.{$~crit~crit~$ & True, $~crit~$~crit & True, $~$~crit~crit & True};
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("mux-sem-lastin_ii_reach_bad", 0);
echo "";
echo "Reachable forbidden states empty?";
reg.is_empty;
