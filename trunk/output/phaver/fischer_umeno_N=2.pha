REACH_USE_CONVEX_HULL = false; // not possible because of global variables
REACH_MAX_ITER = 0; 
REACH_USE_BBOX = false;
COMPOSE_USE_CONVEX_HULL_FOR_REACH = false;
COMPOSE_WITH_REACH_MIN = true;
CHEAP_CONTAIN_RETURN_OTHERS = false;

N := 2;
A := 2;
B := 2;

automaton agent1
contr_var : x_1,last_1,first_1;
input_var : g;
synclabs :  tau, remtest1, testset1, setcheck1, checktest1, checkleavetry1, leavetrycrit1, critreset1, resetleaveexit1, leaveexitrem1;
loc rem: while x_1 <= last_1 wait { x_1' == 1 & last_1' == 0 & first_1' == 0 }
	 when  true  sync remtest1  do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1}  goto test;
	 when true sync tau do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1} goto rem;
loc test: while x_1 <= last_1 wait { x_1' == 1 & last_1' == 0 & first_1' == 0 }
	 when g == 0 sync testset1  do {last_1' == x_1 + A & g' == g & x_1' == x_1 & first_1' == first_1 }  goto set;
	 when true sync tau do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1} goto test;
loc set: while x_1 <= last_1 wait { x_1' == 1 & last_1' == 0 & first_1' == 0 }
	 when  true  sync setcheck1  do {g' == 1 & first_1' == x_1 + B & x_1' == x_1 & last_1' == last_1 }  goto check;
	 when true sync tau do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1} goto set;
loc check: while x_1 <= last_1 wait { x_1' == 1 & last_1' == 0 & first_1' == 0 }
	 when  ! (g == 1) & first_1 <= x_1 sync checktest1  do {first_1' == 0 & g' == g & x_1' == x_1 & last_1' == last_1 }  goto test;
	 when g == 1 & first_1 <= x_1 sync checkleavetry1  do {first_1' == 0 & g' == g & x_1' == x_1 & last_1' == last_1 }  goto leavetry;
	 when true sync tau do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1} goto check;
loc leavetry: while x_1 <= last_1 wait { x_1' == 1 & last_1' == 0 & first_1' == 0 }
	 when  true  sync leavetrycrit1  do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1}  goto crit;
	 when true sync tau do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1} goto leavetry;
loc crit: while x_1 <= last_1 wait { x_1' == 1 & last_1' == 0 & first_1' == 0 }
	 when  true  sync critreset1  do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1}  goto reset;
	 when true sync tau do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1} goto crit;
loc reset: while x_1 <= last_1 wait { x_1' == 1 & last_1' == 0 & first_1' == 0 }
	 when  true  sync resetleaveexit1  do {g' == 0 & x_1' == x_1 & last_1' == last_1 & first_1' == first_1 }  goto leaveexit;
	 when true sync tau do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1} goto reset;
loc leaveexit: while x_1 <= last_1 wait { x_1' == 1 & last_1' == 0 & first_1' == 0 }
	 when  true  sync leaveexitrem1  do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1}  goto rem;
	 when true sync tau do {g' == g & x_1' == x_1 & last_1' == last_1 & first_1' == first_1} goto leaveexit;

initially rem & x_1 == 0 & last_1 == A & first_1 == 0;

end

automaton agent2
contr_var : x_2,last_2,first_2;
input_var : g;
synclabs :  tau, remtest2, testset2, setcheck2, checktest2, checkleavetry2, leavetrycrit2, critreset2, resetleaveexit2, leaveexitrem2;
loc rem: while x_2 <= last_2 wait { x_2' == 1 & last_2' == 0 & first_2' == 0 }
	 when  true  sync remtest2  do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2}  goto test;
	 when true sync tau do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2} goto rem;
loc test: while x_2 <= last_2 wait { x_2' == 1 & last_2' == 0 & first_2' == 0 }
	 when g == 0 sync testset2  do {last_2' == x_2 + A & g' == g & x_2' == x_2 & first_2' == first_2 }  goto set;
	 when true sync tau do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2} goto test;
loc set: while x_2 <= last_2 wait { x_2' == 1 & last_2' == 0 & first_2' == 0 }
	 when  true  sync setcheck2  do {g' == 2 & first_2' == x_2 + B & x_2' == x_2 & last_2' == last_2 }  goto check;
	 when true sync tau do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2} goto set;
loc check: while x_2 <= last_2 wait { x_2' == 1 & last_2' == 0 & first_2' == 0 }
	 when  ! (g == 2) & first_2 <= x_2 sync checktest2  do {first_2' == 0 & g' == g & x_2' == x_2 & last_2' == last_2 }  goto test;
	 when g == 2 & first_2 <= x_2 sync checkleavetry2  do {first_2' == 0 & g' == g & x_2' == x_2 & last_2' == last_2 }  goto leavetry;
	 when true sync tau do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2} goto check;
loc leavetry: while x_2 <= last_2 wait { x_2' == 1 & last_2' == 0 & first_2' == 0 }
	 when  true  sync leavetrycrit2  do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2}  goto crit;
	 when true sync tau do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2} goto leavetry;
loc crit: while x_2 <= last_2 wait { x_2' == 1 & last_2' == 0 & first_2' == 0 }
	 when  true  sync critreset2  do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2}  goto reset;
	 when true sync tau do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2} goto crit;
loc reset: while x_2 <= last_2 wait { x_2' == 1 & last_2' == 0 & first_2' == 0 }
	 when  true  sync resetleaveexit2  do {g' == 0 & x_2' == x_2 & last_2' == last_2 & first_2' == first_2 }  goto leaveexit;
	 when true sync tau do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2} goto reset;
loc leaveexit: while x_2 <= last_2 wait { x_2' == 1 & last_2' == 0 & first_2' == 0 }
	 when  true  sync leaveexitrem2  do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2}  goto rem;
	 when true sync tau do {g' == g & x_2' == x_2 & last_2' == last_2 & first_2' == first_2} goto leaveexit;

initially rem & x_2 == 0 & last_2 == A & first_2 == 0;

end

automaton global
contr_var : g;
synclabs: tau,setcheck1,resetleaveexit1,setcheck2,resetleaveexit2;
loc default: while True wait { g' == 0}
	 when True sync tau do { g' == g } goto default;
	 when True sync setcheck1 do { true } goto default;
	 when True sync resetleaveexit1 do { true } goto default;
	 when True sync setcheck2 do { true } goto default;
	 when True sync resetleaveexit2 do { true } goto default;

initially default & g == 0;

end

sys =  global &  agent1 &  agent2;

sys.print("default_automaton_ii_sys_N2", 0);
reg = sys.reachable;
reg.print("default_automaton_ii_reach_N2", 0);
regm11 = reg;
regm11.project_to(x_1,g);
regm11.print("default_automaton_ii_reach_N2projected11", 0);
regm12 = reg;
regm12.project_to(x_1,x_2,g);
regm12.print("default_automaton_ii_reach_N2projected12", 0);
regm21 = reg;
regm21.project_to(x_2,g);
regm21.print("default_automaton_ii_reach_N2projected21", 0);
reg.print("default_automaton_ii_reach_N2", 0);
forbidden = sys.{$~crit~crit & True};
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("default_automaton_ii_reach_bad", 0);
echo "";
echo "Reachable forbidden states empty?";
reg.is_empty;
