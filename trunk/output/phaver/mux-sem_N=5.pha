REACH_USE_CONVEX_HULL = false; // not possible because of global variables
REACH_MAX_ITER = 0; 
REACH_USE_BBOX = false;
COMPOSE_USE_CONVEX_HULL_FOR_REACH = false;
COMPOSE_WITH_REACH_MIN = true;
CHEAP_CONTAIN_RETURN_OTHERS = false;

N := 5;

automaton agent1
input_var : x;
synclabs :  tau, IT1, TC1, CE1, EI1;
loc I: while  true  wait {  True  }
	 when  true  sync IT1  do {x' == x}  goto T;
	 when true sync tau do {x' == x} goto I;
loc T: while  true  wait {  True  }
	 when x == 1 sync TC1  do {x' == 0 }  goto C;
	 when true sync tau do {x' == x} goto T;
loc C: while  true  wait {  True  }
	 when  true  sync CE1  do {x' == x}  goto E;
	 when true sync tau do {x' == x} goto C;
loc E: while  true  wait {  True  }
	 when  true  sync EI1  do {x' == 1 }  goto I;
	 when true sync tau do {x' == x} goto E;

initially I & True;

end

automaton agent2
input_var : x;
synclabs :  tau, IT2, TC2, CE2, EI2;
loc I: while  true  wait {  True  }
	 when  true  sync IT2  do {x' == x}  goto T;
	 when true sync tau do {x' == x} goto I;
loc T: while  true  wait {  True  }
	 when x == 1 sync TC2  do {x' == 0 }  goto C;
	 when true sync tau do {x' == x} goto T;
loc C: while  true  wait {  True  }
	 when  true  sync CE2  do {x' == x}  goto E;
	 when true sync tau do {x' == x} goto C;
loc E: while  true  wait {  True  }
	 when  true  sync EI2  do {x' == 1 }  goto I;
	 when true sync tau do {x' == x} goto E;

initially I & True;

end

automaton agent3
input_var : x;
synclabs :  tau, IT3, TC3, CE3, EI3;
loc I: while  true  wait {  True  }
	 when  true  sync IT3  do {x' == x}  goto T;
	 when true sync tau do {x' == x} goto I;
loc T: while  true  wait {  True  }
	 when x == 1 sync TC3  do {x' == 0 }  goto C;
	 when true sync tau do {x' == x} goto T;
loc C: while  true  wait {  True  }
	 when  true  sync CE3  do {x' == x}  goto E;
	 when true sync tau do {x' == x} goto C;
loc E: while  true  wait {  True  }
	 when  true  sync EI3  do {x' == 1 }  goto I;
	 when true sync tau do {x' == x} goto E;

initially I & True;

end

automaton agent4
input_var : x;
synclabs :  tau, IT4, TC4, CE4, EI4;
loc I: while  true  wait {  True  }
	 when  true  sync IT4  do {x' == x}  goto T;
	 when true sync tau do {x' == x} goto I;
loc T: while  true  wait {  True  }
	 when x == 1 sync TC4  do {x' == 0 }  goto C;
	 when true sync tau do {x' == x} goto T;
loc C: while  true  wait {  True  }
	 when  true  sync CE4  do {x' == x}  goto E;
	 when true sync tau do {x' == x} goto C;
loc E: while  true  wait {  True  }
	 when  true  sync EI4  do {x' == 1 }  goto I;
	 when true sync tau do {x' == x} goto E;

initially I & True;

end

automaton agent5
input_var : x;
synclabs :  tau, IT5, TC5, CE5, EI5;
loc I: while  true  wait {  True  }
	 when  true  sync IT5  do {x' == x}  goto T;
	 when true sync tau do {x' == x} goto I;
loc T: while  true  wait {  True  }
	 when x == 1 sync TC5  do {x' == 0 }  goto C;
	 when true sync tau do {x' == x} goto T;
loc C: while  true  wait {  True  }
	 when  true  sync CE5  do {x' == x}  goto E;
	 when true sync tau do {x' == x} goto C;
loc E: while  true  wait {  True  }
	 when  true  sync EI5  do {x' == 1 }  goto I;
	 when true sync tau do {x' == x} goto E;

initially I & True;

end

automaton global
contr_var : x;
synclabs: tau,TC1,EI1,TC2,EI2,TC3,EI3,TC4,EI4,TC5,EI5;
loc default: while True wait { x' == 0}
	 when True sync tau do { x' == x } goto default;
	 when True sync TC1 do { true } goto default;
	 when True sync EI1 do { true } goto default;
	 when True sync TC2 do { true } goto default;
	 when True sync EI2 do { true } goto default;
	 when True sync TC3 do { true } goto default;
	 when True sync EI3 do { true } goto default;
	 when True sync TC4 do { true } goto default;
	 when True sync EI4 do { true } goto default;
	 when True sync TC5 do { true } goto default;
	 when True sync EI5 do { true } goto default;

initially default & x == 1;

end

sys =  global &  agent1 &  agent2 &  agent3 &  agent4 &  agent5;

sys.print("mux-sem_ii_sys_N5", 0);
reg = sys.reachable;
reg.print("mux-sem_ii_reach_N5", 0);
forbidden = sys.{$~crit~crit~$~$~$ & True,
$~crit~$~crit~$~$ & True,
$~crit~$~$~crit~$ & True,
$~crit~$~$~$~crit & True,
$~$~crit~crit~$~$ & True,
$~$~crit~$~crit~$ & True,
$~$~crit~$~$~crit & True,
$~$~$~crit~crit~$ & True,
$~$~$~crit~$~crit & True,
$~$~$~$~crit~crit & True};
reg.intersection_assign(forbidden);
echo "";
echo "Reachable forbidden states:";
reg.print("mux-sem_ii_reach_bad", 0);
echo "";
echo "Reachable forbidden states empty?";
reg.is_empty;
